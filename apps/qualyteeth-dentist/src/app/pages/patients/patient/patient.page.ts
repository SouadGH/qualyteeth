import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { NavController, NavParams, PopoverController, ToastController } from '@ionic/angular';
// import Raphael from 'raphael'
import { HttpEventType, HttpResponse } from '@angular/common/http';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { DateAdapter } from '@angular/material/core';
import { CalendarService } from 'apps/qualyteeth-dentist/src/app/services/calendar.service';
import { DiagnosticService } from 'apps/qualyteeth-dentist/src/app/services/diagnostic.service';
import { DocumentService } from 'apps/qualyteeth-dentist/src/app/services/document.service';
import { SpeechRecognitionService } from 'apps/qualyteeth-dentist/src/app/services/speech-recognition.service';
import { StorageService } from 'apps/qualyteeth-dentist/src/app/services/storage.service';
import { ToothService } from 'apps/qualyteeth-dentist/src/app/services/tooth.service';
import { TreatmentService } from 'apps/qualyteeth-dentist/src/app/services/treatment.service';
import { PatientDto } from 'libs/shared/src/lib/dto/patient.dto';
import { PredicamentDto } from 'libs/shared/src/lib/dto/predicament.dto';
import { ToothDto } from 'libs/shared/src/lib/dto/tooth.dto';
import { Subscription } from 'rxjs';
import { PatientService } from '../../../services/patient.service';

@Component({
  selector: 'app-patient',
  templateUrl: './patient.page.html',
  styleUrls: ['./patient.page.scss']
})
export class PatientPage implements OnInit {

  // @ViewChild('map', { read: ElementRef, static: false }) mapElement: ElementRef;
  // // @ViewChild('map') set content(content: ElementRef) {
  // //   if (content) { // initially setter gets called with undefined
  // //     this.mapElement = content;
  // //     this.initTeeth();
  // //   }
  // // }

  @ViewChild('imgChooser', { static: false }) imgChooser: ElementRef;
  progressInfo = null;

  selectedTab = 0;

  speechRecognitionStarted: boolean = false;
  speechSubscription: Subscription;

  private speechCommands: Array<string> = ['profil', 'odontogramme', 'calendrier', 'document', 'facture', 'diagnostic'];

  patient: PatientDto;
  patientForm: FormGroup;

  // treatments: Array<Treatment> = new Array<Treatment>();

  teeth: Array<ToothDto & { selectedParts: Array<string>, hasDiagnostic: boolean, hasTreatment: boolean }>;
  diagnostics: Array<PredicamentDto>;
  treatments: Array<PredicamentDto>;

  diagnosticsOrTraitements: Array<PredicamentDto & { type: 'DIAGNOSTIC' | 'TREATMENT' }>;
  diagnosticsOrTraitementsColumns = ['date', 'dentist', 'teeth', 'diagnosticTreatment', 'comment', 'status', 'more']

  // calendarEvents: Array<CalendarEvent>;
  // calendarEventsColumns: string[] = ['date', 'hour', 'dentist', 'service', 'duration', 'reminder'];

  // documents: Array<CalendarEvent>;
  // documentsColumns: string[] = ['date', 'name', 'download'];

  bills: any[] = [];
  billsColumns: string[] = ['date', 'treatment', 'download'];

  // odontogramBtns: MatFabMenu[] = [
  //   // { id: 1, icon: 'article', tooltip: 'Historique', tooltipPosition: 'above', iconColor: 'primary' },
  //   { id: 2, icon: 'healing', tooltip: 'Traitement', tooltipPosition: 'above', iconColor: 'primary' },
  //   { id: 3, icon: 'search', tooltip: 'Diagnostique', tooltipPosition: 'above', iconColor: 'primary' },
  //   // { id: 4, icon: 'mic', tooltip: 'A la voix', tooltipPosition: 'above', iconColor: 'primary' },
  // ];

  /**
   *
   */
  constructor(
    private storageSvc: StorageService,
    // private dentistSvc: PractitionerService,
    private patientSvc: PatientService,
    private nav: NavController,
    private treatmentSvc: TreatmentService,
    private documentSvc: DocumentService,
    private toothsvc: ToothService,
    private diagnosticSvc: DiagnosticService,
    private calendarSvc: CalendarService,
    // private surgerySvc: SurgeryService,
    private activtedRoute: ActivatedRoute,
    public popoverCtrl: PopoverController,
    private toastCtrl: ToastController,
    private speechSvc: SpeechRecognitionService,
    private fb: FormBuilder,
    private adapter: DateAdapter<any>) {

    this.adapter.setLocale('fr-CH');

    this.patientForm = this.fb.group({
      firstname: [null, [Validators.required]],
      lastname: [null, [Validators.required]],
      email: [null],
      phoneNumber: [null],
      birthdate: [null],
      gender: [null],
    });

    // this.speechSvc.recognition.lang = 'fr-CH';
  }

  /**
   *
   */
  async ngOnInit() {

  }

  /**
   *
   */
  async ionViewWillEnter() {
    const patientId = this.activtedRoute.snapshot.paramMap.get('patient_id');
    this.patient = await this.patientSvc.getPatient(patientId);

    console.log(this.patient)

    // const userId = await this.storageSvc.getUserid();
    // this.treatments = await this.treatmentSvc.getTreatmentsForPatientAndDentist(patientId, userId);

    // const surgery: Surgery = await this.surgerySvc.getActiveSurgeryForDentist();

    this.teeth = <any>await this.toothsvc.getAll();
    await this.loadDiagnosticsAndTreatments();
    await this.loadCalendar();
    await this.loadDocuments();

    this.patientForm.controls['lastname'].setValue(this.patient.lastname);
    this.patientForm.controls['firstname'].setValue(this.patient.firstname);
    this.patientForm.controls['email'].setValue(this.patient.email);
    this.patientForm.controls['phoneNumber'].setValue(this.patient.phoneNumber);
    // this.initTeeth();
  }

  /**
   *
   */
  async loadCalendar(): Promise<void> {
    // this.calendarEvents = await this.calendarSvc.getCalendarEventsForPatient(this.patient.id);
    // this.calendarEvents = this.calendarEvents.filter(e => moment(e.startDate).isSameOrAfter(moment()));
  }

  /**
   *
   */
  async loadDocuments(): Promise<void> {
    // this.documents = await this.documentSvc.getDocuments(this.patient.id);

    // if (this.filteredBy === 'image') {
    //   this.documents = this.documents.filter(d => this.imageSuffixes.some(s => d.filename.toLowerCase().endsWith(s)))
    // }

    // this.documents.forEach(doc => {
    //   if (this.imageSuffixes.some(s => doc.filename.toLowerCase().endsWith(s))) {
    //     doc.icon = 'image-outline';
    //   } else {
    //     doc.icon = 'document-outline';
    //   }
    // })
  }

  /**
   *
   */
  async loadDiagnosticsAndTreatments(): Promise<void> {
    // this.diagnostics = await this.diagnosticSvc.getForPatientAndDentist(this.patient.id);
    // diagnostics = diagnostics.sort((a, b) => moment(b.startDate).valueOf() - moment(a.startDate).valueOf());

    // this.treatments = await this.treatmentSvc.getForPatientAndDentist(this.patient.id);
    // treatments = treatments.sort((a, b) => moment(b.startDate).valueOf() - moment(a.startDate).valueOf());

    // console.log(this.diagnostics)
    // console.log(this.treatments)

    // this.diagnosticsOrTraitements = this.diagnostics.map(d => ({ ...d, type: 'DIAGNOSTIC' }));
    // this.diagnosticsOrTraitements = this.diagnosticsOrTraitements.concat(this.treatments.map(t => ({ ...t, type: 'TREATMENT' })));
    // this.diagnosticsOrTraitements = this.diagnosticsOrTraitements.sort((a, b) => moment(b.startDate).valueOf() - moment(a.startDate).valueOf());

    // console.log(this.diagnosticsOrTraitements);
  }

  /**
   *
   */
  // getDurationStr(calendarEvent: CalendarEvent): string {
  //   return moment.duration(moment(calendarEvent.endDate).diff(moment(calendarEvent.startDate))).asMinutes().toLocaleString() + '\'';
  // }

  /**
   *
   */
  // private initTeeth(): void {

  //   if (this.mapElement.nativeElement.children.length >= 1) {
  //     return;
  //   }

  //   const paper = Raphael(this.mapElement.nativeElement, 294, 500);

  //   const style = {
  //     // 'fill': '#ffffff',
  //     'stroke': '#003f85',
  //     'stroke-width': 2,
  //     'stroke-linejoin': 'round',
  //     'cursor': 'pointer'
  //   };

  //   const animationSpeed = 300;
  //   const hoverStyle = {
  //     fill: '#A8BED5'
  //   }

  //   const txtStyle = {
  //     cursor: "pointer"
  //   }

  //   const teeth = {};

  //   teeth["18"] = paper.path("m 324.3834890017,2003.43530452 c 57.4839920218,5.253136854 109.3219969499,18.930687199 144.2348029039,50.377778042 49.8416760049,25.760260783 81.6409100328,52.761800192 79.0106020157,82.132013126 15.9534728303,44.767467548 3.5366776174,77.288234637 -5.8074033222,111.135411868 l -26.5540089927,55.56447508 c -16.7961862308,32.339275366 -51.5065466804,53.866162797 -105.8005989194,63.572998115 -63.9168453229,10.59491636 -127.8392220458,23.302667144 -191.6331313116,-13.060423994 -72.6301403264,-27.092735555 -76.0863395889,-65.528414615 -83.062952216,-103.386826438 -21.4356378762,-38.835468854 -35.78767250009,-85.598099025 -27.2861494715,-157.935825893 7.5326472866,-33.066420407 17.1059924281,-75.103031393 63.979533079,-94.316393458 46.873540651,-19.213362064 88.9027512175,-9.244923087 152.9193062348,5.916793552 z");
  //   teeth["17"] = paper.path("m 170.919770051,1801.976509486 c -20.1586602161,-27.624116583 -17.522353289,-67.834121107 -3.9266654327,-114.095178014 51.8795200038,-118.830591983 145.0827046794,-144.441318662 290.2799685961,-52.761357258 45.5441441495,18.384403024 81.6494654936,53.735518719 105.4011402159,89.008638618 23.3643165632,34.697862324 45.0567061069,51.40025203 33.5077161723,112.76416567 -26.665323264,103.36687621 -72.7243013875,184.452136261 -203.2586836994,168.482532505 -51.8650912164,-6.30913933 -97.6669008229,7.27250093 -163.2654151506,-44.089550292 -25.3932483022,-42.03056632 -74.3256139495,-39.231066258 -58.7380607016,-159.309251229 z");
  //   teeth["16"] = paper.path("m 306.2339259724,1224.863994248 c 99.0240983387,-85.946921914 172.0283479182,-36.304759144 245.0363968926,13.317605031 19.7154740956,24.464844311 39.0021793422,48.928566106 66.0052160669,73.412489255 82.6887520379,79.467269295 67.1353611983,133.397884088 19.2499537748,178.924248804 -29.8453694894,33.111129007 -58.4287575193,65.595391721 -73.4788608544,91.357241862 -17.2493514918,17.760472192 -33.1081307749,31.385349239 -46.5782713589,37.906357428 -63.7429065942,28.622681662 -88.0801978277,-11.297271596 -123.8621163794,-31.310292684 -128.5576767622,-67.758275872 -174.5957213752,-162.144675268 -141.5155714102,-282.061593931 3.6442123527,-46.232129334 25.3884563351,-69.066647194 55.1432532686,-81.546055765 z");
  //   teeth["15"] = paper.path("m 504.1943714725,928.1981376419 c -97.7576346871,13.9461805252 -144.122381426,64.3716540232 -114.5265934141,168.7148331061 31.17175929,38.293402441 59.511205975,79.404326223 112.4249330481,96.069304561 18.7487935646,-0.388769525 35.2121307617,1.495981916 46.4565900923,8.572356532 16.2328273093,4.440218031 34.8310997028,4.410140924 54.9257019131,1.552251011 37.8428499016,-20.098096277 88.726665597,-3.377450995 110.0431440039,-70.13468361 17.5968199289,-53.414097695 14.5931143351,-100.449681759 -27.8149356844,-135.2845504675 -83.8146815423,-70.0933969279 -129.8833504981,-64.1980727046 -181.5088399589,-69.4895111326 z");
  //   teeth['14'] = paper.path("m 583.2003823741,654.9703326396 c -81.5943052425,28.414823435 -86.9583059124,67.6206838389 -87.3507782238,107.5303056487 -4.1506609318,175.5424330585 144.8627223194,172.5708523866 173.7220667534,159.0760375875 45.4033326232,5.6227154605 76.9366527449,0.3992464885 101.7508719925,-10.078479269 46.3334912004,-3.5546852392 68.6509533848,-31.2514774879 76.0559014183,-73.9390707626 6.7824850036,-22.914189179 9.0946740642,-48.0781745468 -2.376307385,-80.1789097128 -8.3857613424,-17.9292810383 -2.6833453543,-35.1171733161 -54.1657178326,-55.3144087083 -54.2861281042,-5.9835381702 -71.4704591818,-19.7525293644 -93.8749196789,-34.7286413179 -32.2277093475,-34.9728042278 -72.3166189331,-27.3430223714 -113.7611170439,-12.3668334656 z");
  //   teeth['13'] = paper.path("m 729.7312922892,663.1125978193 c -54.0455051087,-18.030690063 -79.3546403006,-51.0180220153 -85.0985342464,-94.1886272077 -6.6772196701,-42.2101790257 0.6959646941,-83.3797792191 26.1847154212,-123.2077329487 22.2888958305,-62.0256804461 44.4064164728,-58.5910103968 66.5438357414,-62.7570383919 19.7473654628,2.4903765858 37.6952018786,1.358015256 55.174481609,-0.7176251347 52.8340032559,-2.3410315904 72.5151039254,21.6188095081 85.2474889003,37.2922704648 44.5828252964,59.6990477321 39.6604807177,94.4832925236 50.5030493614,137.2016522226 5.5774550048,47.1684174069 3.1173027109,87.4995939639 -20.9762091345,109.4282181007 -73.3066008973,54.8280657888 -85.7675671642,27.9625483052 -116.4466181803,25.5573003637 C 733.7334892855,667.6591874257 748.42773728,671.984373941 729.7312922892,663.1125978193 z");
  //   teeth['12'] = paper.path("m 897.9019366154,308.3792375892 c 133.3835310536,-87.5613537511 106.0569644566,-62.0034530209 163.1448805536,-81.4697191057 19.899031035,-7.111858546 36.417080415,-8.1753040614 44.813891252,5.2897542797 l 30.953128413,31.1156243983 c 21.035125685,26.4357462888 19.635278783,32.0479893281 22.305385636,41.4378476463 9.909026351,81.7429118667 -1.542563649,80.7168976562 -3.750687131,115.5078179534 -15.252868327,29.6124649235 -33.673409679,56.0406273513 -64.837758828,69.6580802595 -19.232397491,13.5675668753 -45.865912146,12.2355088661 -74.157988967,7.5645016734 l -46.5222250545,-11.3287301359 c -18.2405641427,2.7429835313 -33.9562744855,-9.4223655928 -49.9479202128,-19.9584178032 -33.7488867779,-23.690555134 -42.4715410058,-57.3156811326 -54.0754422847,-89.7970491584 -2.3344115673,-21.0090676852 3.6429865796,-39.6197783072 17.3880179903,-55.9891529577 z");
  //   teeth['11'] = paper.path("m 1158.388056002,254.7506592663 c 0.651560784,6.0072967537 35.732613402,67.865370214 44.576917941,95.8066854615 11.959063544,30.1658678864 31.002427073,57.4363390075 81.708949307,71.7658833603 41.404089308,-5.0843118498 83.397042277,-6.171562277 118.249741307,-55.7250969802 l 85.685325307,-129.9485357186 15.62551886,-41.3385445437 c 11.282548987,-29.848874655 -13.151488718,-57.2954612076 -36.026221376,-69.0600702256 l -62.025871926,-16.5417502 c -36.22666052,-2.3212254631 -60.27224344,-12.93929471026 -131.056602597,8.2776130308 l -66.417449975,14.4813417617 c -24.16180471,10.6547954577 -56.427008002,6.4843561373 -57.054338951,60.1956661338 1.269809953,20.5305004954 -6.771581431,39.4840693093 6.734032103,62.08680792 z");

  //   teeth['28'] = paper.path("m 2702.603115231,2003.907297252 c -57.483992021,5.253136854 -109.321996949,18.930687199 -144.234802903,50.377778042 -49.841676005,25.760260783 -81.640910033,52.761800192 -79.010602016,82.132013126 -15.953472831,44.767467548 -3.536677618,77.288234637 5.807403322,111.135411868 l 26.554008993,55.56447508 c 16.79618623,32.339275366 51.50654668,53.866162797 105.800598919,63.572998115 63.916845323,10.59491636 127.839222046,23.302667144 191.633131312,-13.060423994 72.630140326,-27.092735555 76.086339589,-65.528414615 83.062952216,-103.386826438 21.435637876,-38.835468854 35.7876725,-85.598099025 27.286149471,-157.935825893 -7.532647286,-33.066420407 -17.105992428,-75.103031393 -63.979533079,-94.316393458 -46.873540651,-19.213362064 -88.902751217,-9.244923087 -152.919306235,5.916793552 z");
  //   teeth['27'] = paper.path("m 2856.066834182,1802.448502218 c 20.158660216,-27.624116583 17.522353289,-67.834121107 3.926665433,-114.095178014 -51.879520004,-118.830591983 -145.08270468,-144.441318662 -290.279968596,-52.761357258 -45.54414415,18.384403024 -81.649465494,53.735518719 -105.401140216,89.008638618 -23.364316563,34.697862324 -45.056706107,51.40025203 -33.507716173,112.76416567 26.665323265,103.36687621 72.724301388,184.452136261 203.2586837,168.482532505 51.865091216,-6.30913933 97.666900823,7.27250093 163.265415151,-44.089550292 25.393248302,-42.03056632 74.325613949,-39.231066258 58.738060701,-159.309251229 z");
  //   teeth['26'] = paper.path("m 2720.752678261,1225.33598698 c -99.024098339,-85.946921914 -172.028347918,-36.304759144 -245.036396893,13.317605031 -19.715474096,24.464844311 -39.002179342,48.928566106 -66.005216067,73.412489255 -82.688752038,79.467269295 -67.135361198,133.397884088 -19.249953775,178.924248804 29.84536949,33.111129007 58.42875752,65.595391721 73.478860855,91.357241862 17.249351492,17.760472192 33.108130775,31.385349239 46.578271359,37.906357428 63.742906594,28.622681662 88.080197827,-11.297271596 123.862116379,-31.310292684 128.557676762,-67.758275872 174.595721375,-162.144675268 141.51557141,-282.061593931 -3.644212352,-46.232129334 -25.388456335,-69.066647194 -55.143253268,-81.546055765 z");
  //   teeth['25'] = paper.path("m 2522.792232761,928.6701303739 c 97.757634687,13.9461805252 144.122381426,64.3716540232 114.526593414,168.7148331061 -31.17175929,38.293402441 -59.511205975,79.404326223 -112.424933048,96.069304561 -18.748793565,-0.388769525 -35.212130762,1.495981916 -46.456590093,8.572356532 -16.232827309,4.440218031 -34.831099703,4.410140924 -54.925701913,1.552251011 -37.842849901,-20.098096277 -88.726665597,-3.377450995 -110.043144004,-70.13468361 -17.596819929,-53.414097695 -14.593114335,-100.449681759 27.814935685,-135.2845504675 83.814681542,-70.0933969279 129.883350498,-64.1980727046 181.508839959,-69.4895111326 z");
  //   teeth['24'] = paper.path("m 2443.786221859,655.4423253716 c 81.594305243,28.414823435 86.958305912,67.6206838389 87.350778224,107.5303056487 4.150660932,175.5424330585 -144.86272232,172.5708523866 -173.722066754,159.0760375875 -45.403332623,5.6227154605 -76.936652744,0.3992464885 -101.750871992,-10.078479269 -46.3334912,-3.5546852392 -68.650953385,-31.2514774879 -76.055901418,-73.9390707626 -6.782485004,-22.914189179 -9.094674065,-48.0781745468 2.376307385,-80.1789097128 8.385761342,-17.9292810383 2.683345354,-35.1171733161 54.165717832,-55.3144087083 54.286128104,-5.9835381702 71.470459182,-19.7525293644 93.874919679,-34.7286413179 32.227709348,-34.9728042278 72.316618933,-27.3430223714 113.761117044,-12.3668334656 z");
  //   teeth['23'] = paper.path("m 2297.255311944,663.5845905513 c 54.045505109,-18.030690063 79.354640301,-51.0180220153 85.098534246,-94.1886272077 6.67721967,-42.2101790257 -0.695964694,-83.3797792191 -26.184715421,-123.2077329487 -22.28889583,-62.0256804461 -44.406416473,-58.5910103968 -66.543835741,-62.7570383919 -19.747365463,2.4903765858 -37.695201879,1.358015256 -55.174481609,-0.7176251347 -52.834003256,-2.3410315904 -72.515103926,21.6188095081 -85.247488901,37.2922704648 -44.582825296,59.6990477321 -39.660480717,94.4832925236 -50.503049361,137.2016522226 -5.577455005,47.1684174069 -3.117302711,87.4995939639 20.976209135,109.4282181007 73.306600897,54.8280657888 85.767567164,27.9625483052 116.44661818,25.5573003637 57.130012476,-24.0618278624 42.435764481,-19.7366413471 61.132209472,-28.6084174688 z");
  //   teeth['22'] = paper.path("m 2129.084667618,308.8512303212 c -133.383531054,-87.5613537511 -106.056964457,-62.0034530209 -163.144880554,-81.4697191057 -19.899031035,-7.111858546 -36.417080415,-8.1753040614 -44.813891252,5.2897542797 l -30.953128413,31.1156243983 c -21.035125685,26.4357462888 -19.635278783,32.0479893281 -22.305385636,41.4378476463 -9.909026351,81.7429118667 1.542563649,80.7168976562 3.750687132,115.5078179534 15.252868327,29.6124649235 33.673409678,56.0406273513 64.837758827,69.6580802595 19.232397491,13.5675668753 45.865912146,12.2355088661 74.157988967,7.5645016734 l 46.522225055,-11.3287301359 c 18.240564142,2.7429835313 33.956274485,-9.4223655928 49.947920212,-19.9584178032 33.748886778,-23.690555134 42.471541006,-57.3156811326 54.075442285,-89.7970491584 2.334411567,-21.0090676852 -3.642986579,-39.6197783072 -17.38801799,-55.9891529577 z");
  //   teeth['21'] = paper.path("m 1868.598548231,255.2226519983 c -0.651560784,6.0072967537 -35.732613402,67.865370214 -44.57691794,95.8066854615 -11.959063545,30.1658678864 -31.002427074,57.4363390075 -81.708949308,71.7658833603 -41.404089308,-5.0843118498 -83.397042276,-6.171562277 -118.249741307,-55.7250969802 l -85.685325307,-129.9485357186 -15.62551886,-41.3385445437 c -11.282548986,-29.848874655 13.151488718,-57.2954612076 36.026221376,-69.0600702256 l 62.025871926,-16.5417502 c 36.22666052,-2.3212254631 60.27224344,-12.93929471026 131.056602598,8.2776130308 l 66.417449974,14.4813417617 c 24.16180471,10.6547954577 56.427008003,6.4843561373 57.054338952,60.1956661338 -1.269809954,20.5305004954 6.77158143,39.4840693093 -6.734032104,62.08680792 z");

  //   teeth["38"] = paper.path("m 2852.794088874,2778.516753195 c 5.348102212,-37.443387096 29.281356523,-41.025175647 10.022057051,-123.302522274 -10.032907336,-58.703167726 -38.807845398,-107.190849099 -103.804509764,-135.935603135 -39.344044648,-5.601062388 -75.203377274,-33.653346766 -120.689241576,0.315964417 -13.257555676,11.587330625 -23.134753655,17.763676393 -31.837763311,22.497221175 -18.080635675,18.823403332 -53.224681664,19.935738729 -70.450182721,91.564062067 0.01527492,27.295688449 6.671749225,37.861494715 -5.781690545,96.567191481 -3.947631806,22.621967582 -15.434171327,36.807248991 -2.380821162,78.45477769 14.067565596,19.261688096 12.796665732,39.659349395 56.183245385,56.749658978 11.906882315,10.997671312 106.514183464,21.376076683 137.122661119,20.330738967 30.608477655,-1.045337716 29.085321077,9.40732459 75.771533442,-34.681246656 18.51545596,-23.373877938 35.331526216,-32.857299545 55.844712082,-72.56024271 z");
  //   teeth["37"] = paper.path("m 2732.398242828,2890.901299075 c 32.141090878,14.940043911 64.948587402,24.433014506 94.976215892,56.648098986 24.864339903,19.581120988 43.364486154,54.836127137 47.74087948,124.875442754 2.087232332,49.247043741 14.02250162,97.236889283 -18.570496726,150.911203522 -27.983287186,23.589522236 -10.840622023,31.618348275 -86.881345375,71.779424692 -39.172916753,16.410819706 -67.293360054,52.593981075 -127.504521672,31.368395932 -29.127251389,-8.24917554 -38.964506011,-4.992926946 -88.86050582,-25.629520802 -21.140186374,-4.816097616 -38.65150893,-16.93767472 -48.393054843,-44.701046818 -10.491920649,-17.963280797 -19.259042405,-42.903333439 -25.207548086,-79.244623264 2.042647912,-31.395976004 6.774580916,-44.312648603 11.048875937,-60.37396034 6.834934207,-42.214079329 4.271410197,-59.799922663 -0.18957865,-72.413544945 -0.462025243,-21.263231106 3.775657972,-42.538766049 17.074310461,-63.838022607 6.984652309,-23.018281024 11.58291593,-44.785482581 52.403218703,-69.965017122 37.169187114,-27.941868031 61.292401594,-48.955984624 172.363550699,-19.416829988 z");
  //   teeth["36"] = paper.path("m 2526.628587586,3321.613891979 c -20.132401923,-6.260141406 -42.26093233,5.883734843 -64.603042404,19.996784911 l -30.082034846,34.561631555 c -21.194766764,20.170499358 -30.081212236,40.308775532 -28.290196163,60.419098114 1.926216358,35.052548571 -7.404924617,70.134568902 -30.759035984,105.253301366 -14.939401526,43.093341407 -24.693055335,84.731562855 1.166745985,116.376654631 15.792512355,28.729327018 34.986248746,56.087824485 73.474217162,75.669973452 40.242937152,16.599547008 75.722234442,39.185706239 124.257120722,45.364506624 31.724067584,2.454497278 57.487558926,12.899928015 108.593234754,-10.629160111 l 69.705474922,-46.734372592 c 11.735847029,-8.591835292 22.91453306,-13.401799028 41.20538811,-66.487413524 5.984170957,-49.323514744 28.956566499,-96.568656733 1.33143339,-150.003999736 l -44.23167944,-101.608688004 c -20.913665444,-26.116563572 -34.796780359,-54.810550658 -79.499651686,-72.205911185 -26.054786756,-8.407196011 -43.546179978,-21.514464615 -93.14826699,-16.997576247 z");
  //   teeth["35"] = paper.path("m 2373.48106925,3765.981870852 c -84.629579113,42.06299812 -83.396483474,64.680550044 -85.953829591,96.77708213 6.406705214,38.441718499 4.696215772,52.742705138 4.497651818,71.540194491 -1.143819465,39.516941471 23.469574797,49.903789713 38.978035379,70.587852931 49.73285615,49.760282234 76.227324335,33.678506941 111.317102998,41.95009591 32.268319628,-4.969552668 51.93089771,-9.906103507 70.651045815,-14.840187064 52.622219177,-12.772827536 48.023477121,-32.546179837 67.974572234,-49.316056849 25.579324568,-34.325041047 27.828019714,-78.185453143 14.318845775,-128.486202785 -11.07841769,-29.923787999 -33.560914677,-52.302616128 -57.09044917,-73.988722313 l -57.83515697,-29.159032841 c -44.400023469,-18.358744817 -95.266648429,6.843321142 -106.857818288,14.93497639 z");
  //   teeth["34"] = paper.path("m 2388.057265808,4065.082666538 c 33.559840097,46.276524326 41.613710911,79.474114418 38.210758693,106.796882293 -10.039200146,47.539180136 -15.234377915,98.557560833 -65.210079992,117.412501072 -79.754853221,26.572479213 -96.922012136,4.51951626 -129.32569991,-5.695928774 -37.07867036,-18.027935118 -66.236044722,-40.609875835 -87.246961343,-67.875269131 -16.158178392,-11.164632849 -14.950794732,-22.374728736 -15.605206862,-33.579950443 2.49577187,-20.81699859 -1.982819668,-34.870628922 -3.583677367,-51.71493312 -2.44036155,-32.670983444 11.662388246,-55.474909117 19.613113833,-81.948179509 23.515579682,-19.14754622 40.745205704,-45.441201697 79.185944157,-47.62126438 l 66.374569089,-1.897912452 c 40.886026236,-2.142621652 68.775441763,33.325346927 97.587239702,66.124054444 z");
  //   teeth["33"] = paper.path("m 2106.581461425,4226.164947235 c -57.685017418,-8.105638426 -108.174411755,-8.371673229 -118.010511106,35.653900214 l -29.084555513,86.28333534 c -20.909538354,65.76401988 1.044472449,52.453116285 4.502165596,73.264326513 l 43.236456996,50.74905023 c 16.522854456,16.726091984 34.326305713,32.550761659 73.363629615,33.4287389 57.235286936,-2.116710535 115.147246245,-3.022886843 127.362337685,-85.678554641 l 4.919624534,-96.564934593 c -11.869146032,-46.14155457 -24.860697382,-91.627454785 -106.289147807,-97.135861963 z");
  //   teeth["32"] = paper.path("m 1799.182740709,4364.03915229 c 16.382483828,-45.751448674 56.387926712,-46.275220309 83.557210209,-24.356766519 l 38.921613161,49.03620265 45.804599921,43.845751473 c 6.660571541,20.522122118 24.578203525,19.256889148 3.692008024,93.094101661 -12.560079347,39.938941403 -37.821191447,57.78554284 -68.79375736,65.697567951 -39.721367558,11.407157864 -73.730333565,4.074608837 -104.348354469,-14.382038659 -20.871694749,-21.503613402 -53.909489942,-31.650674909 -45.039580123,-80.916846846 8.853015878,-22.155575134 9.273935075,-27.335999794 28.265370387,-69.901824238 5.980536718,-20.613721945 11.988438692,-30.774709567 17.94089025,-62.116147473 z");
  //   teeth["31"] = paper.path("m 1699.3636345,4433.266232279 c 12.991254365,28.540940861 22.196149115,60.127260345 45.899389244,80.052523945 10.634511331,10.65558989 19.789080428,24.290538653 7.968484751,80.151827049 -12.268996288,23.27358007 -33.275116354,36.890209616 -66.282036653,37.242618913 -26.622116615,-5.004367407 -49.539265491,-12.138745336 -91.40156608,-8.381429911 -20.155688032,-4.870150335 -38.52673192,1.66119483 -63.012066814,-30.869623529 -8.086339039,-15.363358771 -20.681250915,-25.147925651 -0.198606205,-75.861808991 l 62.711900617,-83.785155967 c 17.014435171,-12.671875466 18.875454057,-32.183856059 58.530213217,-34.636108881 31.008644157,0.944462237 36.823344134,19.62314287 45.784287923,36.087157372 z");

  //   teeth['48'] = paper.path("m 174.1925153596,2778.044760463 c -5.3481022121,-37.443387096 -29.2813565237,-41.025175647 -10.0220570515,-123.302522274 10.0329073359,-58.703167726 38.8078453984,-107.190849099 103.8045097645,-135.935603135 39.3440446475,-5.601062388 75.2033772731,-33.653346766 120.6892415758,0.315964417 13.2575556759,11.587330625 23.1347536543,17.763676393 31.8377633103,22.497221175 18.0806356756,18.823403332 53.2246816645,19.935738729 70.4501827212,91.564062067 -0.015274922,27.295688449 -6.6717492249,37.861494715 5.7816905448,96.567191481 3.947631806,22.621967582 15.4341713274,36.807248991 2.3808211624,78.45477769 -14.0675655956,19.261688096 -12.7966657323,39.659349395 -56.1832453855,56.749658978 -11.9068823145,10.997671312 -106.5141834636,21.376076683 -137.1226611183,20.330738967 -30.6084776547,-1.045337716 -29.0853210769,9.40732459 -75.7715334426,-34.681246656 -18.51545596,-23.373877938 -35.3315262153,-32.857299545 -55.8447120811,-72.56024271 z");
  //   teeth['47'] = paper.path("m 294.5883614048,2890.429306343 c -32.1410908775,14.940043911 -64.9485874014,24.433014506 -94.976215892,56.648098986 -24.8643399022,19.581120988 -43.3644861539,54.836127137 -47.7408794799,124.875442754 -2.087232332,49.247043741 -14.0225016202,97.236889283 18.5704967257,150.911203522 27.9832871862,23.589522236 10.8406220239,31.618348275 86.8813453751,71.779424692 39.1729167537,16.410819706 67.2933600545,52.593981075 127.5045216727,31.368395932 29.1272513891,-8.24917554 38.964506011,-4.992926946 88.8605058201,-25.629520802 21.1401863732,-4.816097616 38.6515089295,-16.93767472 48.3930548426,-44.701046818 10.4919206487,-17.963280797 19.2590424047,-42.903333439 25.2075480864,-79.244623264 -2.0426479122,-31.395976004 -6.7745809169,-44.312648603 -11.0488759377,-60.37396034 -6.8349342071,-42.214079329 -4.2714101971,-59.799922663 0.1895786505,-72.413544945 0.4620252429,-21.263231106 -3.7756579722,-42.538766049 -17.0743104616,-63.838022607 -6.9846523088,-23.018281024 -11.5829159294,-44.785482581 -52.4032187022,-69.965017122 -37.1691871141,-27.941868031 -61.2924015947,-48.955984624 -172.3635506997,-19.416829988 z");
  //   teeth['46'] = paper.path("m 500.3580166467,3321.141899247 c 20.1324019239,-6.260141406 42.2609323308,5.883734843 64.6030424042,19.996784911 l 30.082034846,34.561631555 c 21.1947667639,20.170499358 30.0812122358,40.308775532 28.2901961628,60.419098114 -1.9262163573,35.052548571 7.4049246177,70.134568902 30.7590359842,105.253301366 14.9394015259,43.093341407 24.6930553357,84.731562855 -1.1667459852,116.376654631 -15.7925123548,28.729327018 -34.9862487453,56.087824485 -73.474217162,75.669973452 -40.2429371519,16.599547008 -75.7222344421,39.185706239 -124.2571207215,45.364506624 -31.724067584,2.454497278 -57.4875589263,12.899928015 -108.5932347538,-10.629160111 l -69.7054749221,-46.734372592 c -11.7358470288,-8.591835292 -22.9145330605,-13.401799028 -41.2053881107,-66.487413524 -5.9841709569,-49.323514744 -28.9565664988,-96.568656733 -1.3314333894,-150.003999736 l 44.2316794401,-101.608688004 c 20.9136654434,-26.116563572 34.796780359,-54.810550658 79.499651686,-72.205911185 26.0547867553,-8.407196011 43.5461799781,-21.514464615 93.1482669895,-16.997576247 z");
  //   teeth['45'] = paper.path("m 653.5055349829,3765.50987812 c 84.6295791133,42.06299812 83.3964834742,64.680550044 85.9538295916,96.77708213 -6.4067052149,38.441718499 -4.696215772,52.742705138 -4.497651818,71.540194491 1.1438194648,39.516941471 -23.4695747978,49.903789713 -38.9780353796,70.587852931 -49.7328561499,49.760282234 -76.227324335,33.678506941 -111.317102998,41.95009591 -32.2683196273,-4.969552668 -51.9308977093,-9.906103507 -70.6510458151,-14.840187064 -52.6222191767,-12.772827536 -48.0234771208,-32.546179837 -67.9745722335,-49.316056849 -25.5793245679,-34.325041047 -27.8280197144,-78.185453143 -14.3188457756,-128.486202785 11.0784176904,-29.923787999 33.5609146773,-52.302616128 57.0904491707,-73.988722313 l 57.8351569698,-29.159032841 c 44.4000234686,-18.358744817 95.2666484293,6.843321142 106.8578182877,14.93497639 z");
  //   teeth['44'] = paper.path("m 638.9293384253,4064.610673806 c -33.5598400974,46.276524326 -41.6137109116,79.474114418 -38.2107586935,106.796882293 10.0392001462,47.539180136 15.2343779152,98.557560833 65.2100799928,117.412501072 79.7548532203,26.572479213 96.9220121359,4.51951626 129.3256999091,-5.695928774 37.0786703605,-18.027935118 66.2360447226,-40.609875835 87.2469613437,-67.875269131 16.1581783919,-11.164632849 14.9507947313,-22.374728736 15.6052068618,-33.579950443 -2.4957718696,-20.81699859 1.9828196674,-34.870628922 3.5836773668,-51.71493312 2.4403615503,-32.670983444 -11.6623882457,-55.474909117 -19.6131138328,-81.948179509 -23.5155796823,-19.14754622 -40.7452057045,-45.441201697 -79.1859441572,-47.62126438 l -66.3745690892,-1.897912452 c -40.8860262355,-2.142621652 -68.7754417628,33.325346927 -97.5872397015,66.124054444 z");
  //   teeth['43'] = paper.path("m 920.4051428084,4225.692954503 c 57.6850174182,-8.105638426 108.1744117546,-8.371673229 118.0105111056,35.653900214 l 29.084555513,86.28333534 c 20.909538354,65.76401988 -1.044472449,52.453116285 -4.502165596,73.264326513 l -43.236456995,50.74905023 c -16.522854457,16.726091984 -34.3263057134,32.550761659 -73.3636296163,33.4287389 -57.2352869351,-2.116710535 -115.147246245,-3.022886843 -127.3623376848,-85.678554641 l -4.9196245336,-96.564934593 c 11.8691460317,-46.14155457 24.8606973818,-91.627454785 106.2891478071,-97.135861963 z");
  //   teeth['42'] = paper.path("m 1227.803863524,4363.567159558 c -16.382483827,-45.751448674 -56.387926711,-46.275220309 -83.557210208,-24.356766519 l -38.921613162,49.03620265 -45.804599921,43.845751473 c -6.660571541,20.522122118 -24.578203525,19.256889148 -3.692008024,93.094101661 12.560079347,39.938941403 37.821191448,57.78554284 68.79375736,65.697567951 39.721367558,11.407157864 73.730333565,4.074608837 104.348354469,-14.382038659 20.871694749,-21.503613402 53.909489943,-31.650674909 45.039580123,-80.916846846 -8.853015878,-22.155575134 -9.273935075,-27.335999794 -28.265370387,-69.901824238 -5.980536718,-20.613721945 -11.988438691,-30.774709567 -17.94089025,-62.116147473 z");
  //   teeth['41'] = paper.path("m 1327.622969734,4432.794239547 c -12.991254366,28.540940861 -22.196149116,60.127260345 -45.899389245,80.052523945 -10.63451133,10.65558989 -19.789080428,24.290538653 -7.968484751,80.151827049 12.268996288,23.27358007 33.275116354,36.890209616 66.282036653,37.242618913 26.622116615,-5.004367407 49.539265491,-12.138745336 91.401566081,-8.381429911 20.155688031,-4.870150335 38.52673192,1.66119483 63.012066813,-30.869623529 8.086339039,-15.363358771 20.681250915,-25.147925651 0.198606206,-75.861808991 l -62.711900618,-83.785155967 c -17.014435171,-12.671875466 -18.875454057,-32.183856059 -58.530213217,-34.636108881 -31.008644156,0.944462237 -36.823344134,19.62314287 -45.784287922,36.087157372 z");

  //   const H = 4737.69;
  //   const W = 3026.94;

  //   const nav = this.nav;
  //   const treatments = this.treatments;
  //   const patient = this.patient;

  //   const toothStyles = {
  //     healthy: '#ffffff',
  //     broken: '#379634',
  //     watch: '#e07a37',
  //     crown: '#12b3d8',
  //     cavity: '#da3539',
  //     ttt: '#bdbcba',
  //     missing: '#666666',
  //     implant: '#43559d',
  //     closed: '#76c4c4',
  //     bridge: '#eb74a8',
  //     other: '#f4ea61'
  //   }

  //   for (const t in teeth) {
  //     (function (tooth) {

  //       tooth.attr(style);

  //       let fillStyle = '#ffffff';
  //       // const trs: Array<Treatment> = treatments.filter(tr => tr.toothFdiNumber === parseInt(t));
  //       // if (trs.length > 1) {
  //       //   fillStyle = toothStyles['other'];
  //       // } else if (trs.length === 1 && trs[0].toothTreatments != null && trs[0].toothTreatments.length > 1) {
  //       //   fillStyle = toothStyles['other'];
  //       // } else if (trs.length === 1 && trs[0].toothTreatments != null && trs[0].toothTreatments.length === 1) {
  //       //   const toothTreatment = trs[0].toothTreatments[0];
  //       //   fillStyle = toothStyles[toothTreatment.status];
  //       // }
  //       tooth.attr('fill', fillStyle);

  //       tooth.data("toothNb", t);
  //       // tooth.attr("text", "test");

  //       const path = tooth.attrs.path;
  //       const X = path[0][1];
  //       const Y = path[0][2];

  //       tooth.scale(0.1, 0.1, X / W - 4, Y / H + 16);

  //       // console.log(tooth.getBBox());
  //       // paper.rect(tooth.getBBox().x, tooth.getBBox().y, tooth.getBBox().width, tooth.getBBox().height);
  //       // const txt = paper.text(tooth.getBBox().x + tooth.getBBox().width / 2, tooth.getBBox().y + tooth.getBBox().height / 2, t);
  //       const txt = paper.text(tooth.getBBox().x + tooth.getBBox().width / 2, tooth.getBBox().y / 2 + tooth.getBBox().height / 3, t);
  //       // map.print(tooth.getBBox().x + tooth.getBBox().width / 2, tooth.getBBox().y + tooth.getBBox().height / 2, t, map.getFont('Times'));

  //       txt.mouseover(() => {
  //         tooth.animate(hoverStyle, animationSpeed);
  //       });

  //       txt.mouseout(() => {
  //         tooth.animate(style, animationSpeed);
  //         tooth.animate({ 'fill': fillStyle }, animationSpeed);
  //       });

  //       txt.attr(txtStyle);

  //       txt.click((e) => {
  //         // console.log(tooth.data('toothNb'));
  //         nav.navigateForward('patients/' + patient.id + '/tooth/' + tooth.data('toothNb'));
  //       });

  //       tooth[0].addEventListener("mouseover", () => {
  //         tooth.animate(hoverStyle, animationSpeed);
  //       }, true);

  //       tooth[0].addEventListener("mouseout", () => {
  //         tooth.animate(style, animationSpeed);
  //         tooth.animate({ 'fill': fillStyle }, animationSpeed);
  //       }, true);

  //       tooth[0].addEventListener("click", e => {
  //         nav.navigateForward('patients/' + patient.id + '/tooth/' + tooth.data('toothNb'));
  //       }, true);

  //     })(teeth[t]);
  //   }
  // }

  /**
   *
   */
  async mail(): Promise<void> {
    document.location.href = 'mailto:' + this.patient.user.email;
  }

  /**
   *
   */
  async phoneCall(): Promise<void> {
    document.location.href = 'tel:' + this.patient.user.phoneNumber;
  }

  /**
   *
   */
  async sms(): Promise<void> {
    document.location.href = 'sms:' + this.patient.user.phoneNumber;
  }

  /**
   *
   */
  // getTeethFdiNumbers(tt: Array<any>) : Array<number> {
  //   return tt.map(t => t.toothFdiNumber);
  // }

  // /**
  //  * 
  //  */
  // async onFabMenuItemSelected(e: string | number): Promise<void> {
  //   // console.log(e)
  //   switch (e) {
  //     case 1:
  //       await this.history();
  //       break;

  //     case 2:
  //       await this.newTreatment();
  //       break;

  //     case 3:
  //       await this.newDiagnostic();
  //       break;

  //     // case 4:
  //     //   await this.startSpeechRecognition();
  //     //   break;
  //   }
  // }

  /**
   *
   */
  async newExamination(): Promise<void> {
    if (this.speechRecognitionStarted && this.speechSubscription != null) {
      this.speechSubscription.unsubscribe();
    }

    this.nav.navigateForward(`/odontogram/${this.patient.id}`);
  }

  /**
   *
   */
  async toggleSpeechRecognition(): Promise<void> {
    if (this.speechRecognitionStarted) {
      this.speechSubscription.unsubscribe();
      this.speechSvc.stop();
      const toast = await this.toastCtrl.create({
        message: 'Reconnaissance vocale stoppée',
        duration: 2000
      });
      await toast.present();
    } else {
      await this.startSpeechRecognition();
      const toast = await this.toastCtrl.create({
        message: 'Reconnaissance vocale démarrée',
        duration: 2000
      });
      await toast.present();
    }
    this.speechRecognitionStarted = !this.speechRecognitionStarted;
  }

  /**
   *
   */
  async startSpeechRecognition(): Promise<void> {
    this.speechSvc.start();

    this.speechSubscription = this.speechSvc.message.subscribe(
      async m => {

        console.log(m);
        // m.messages.forEach(msg => console.log(distance(msg, 'odontogramme'), similarity(msg, 'odontogramme')))

        if (m.success) {

          const maxKey = this.speechSvc.maxSimilarities(m.messages, this.speechCommands);
          if (!maxKey) {
            return
          }

          // const commandsSimilarities = {};
          // this.speechCommands.forEach(c => {
          //   commandsSimilarities[c] = Math.max(...m.messages.map((a: string) => (similarity(a, c))));
          // })

          // // console.log(commandsSimilarities)
          // const maxKey = Object.keys(commandsSimilarities).reduce((a, b) => commandsSimilarities[a] > commandsSimilarities[b] ? a : b);
          // if (commandsSimilarities[maxKey] < 0.6) {
          //   return;
          // }

          switch (maxKey) {
            case 'profil':
              this.selectedTab = 0;
              break;

            case 'odontogramme':
              this.selectedTab = 1;
              break;

            case 'calendrier':
              this.selectedTab = 2;
              break;

            case 'document':
              this.selectedTab = 3;
              break;

            case 'facture':
              this.selectedTab = 4;
              break;

            // case 'diagnostic':
            //   this.selectedTab = 1;
            //   await this.newDiagnostic();
            //   break;
          }

        }
      })
    // this.speechSvc.recognition.onresult = (event: SpeechRecognitionEvent) => {
    //   console.log(event.results)
    // }
  }

  /**
   *
   */
  async history(): Promise<void> {
    // const modal = await this.modalCtrl.create({
    //   component: OndontogramHistoryPage,
    //   cssClass: 'ondontogram-history-modal',
    //   componentProps: {
    //     // diagnostics: this.diagnostics,
    //     patientId: this.patient.id,
    //     teeth: this.teeth
    //   }
    // });
    // await modal.present();
  }

  /**
   *
   */
  // async newDiagnostic(): Promise<void> {

  //   if (this.speechRecognitionStarted && this.speechSubscription != null) {
  //     this.speechSubscription.unsubscribe();
  //   }

  //   this.nav.navigateForward(`/diagnostic/${this.patient.id}`)
  // }

  /**
   *
   */
  // async newTreatment(): Promise<void> {

  //   if (this.speechRecognitionStarted && this.speechSubscription != null) {
  //     this.speechSubscription.unsubscribe();
  //   }

  //   this.nav.navigateForward(`/treatment/${this.patient.id}`)
  // }

  /**
   *
   */
  async addDocument(): Promise<void> {
    this.imgChooser.nativeElement.click();
  }

  /**
   *
   */
  async onDocChosen(e): Promise<void> {

    if (!e || !e.target || !e.target.files) {
      return;
    }
    if (e.target.files.length === 0) {
      return;
    }
    const rawDocument = e.target.files[0];

    await this.upload(rawDocument);
  }

  /**
   *
   */
  private async upload(file: File): Promise<void> {
    this.progressInfo = { value: 0, filename: file.name };

    const accessToken = await this.storageSvc.get('accessTokenQD');
    const userid = await this.storageSvc.getUserid(accessToken);

    this.documentSvc.upload(accessToken, file, this.patient.id, userid).subscribe(
      async event => {
        // console.log(event);
        if (event.type === HttpEventType.UploadProgress) {
          this.progressInfo.value = Math.round(100 * event.loaded / event.total);
          // console.log(this.progressInfo.value);
        } else if (event instanceof HttpResponse) {
          // console.log(event)
          this.progressInfo = null;

          const toast = await this.toastCtrl.create({
            message: 'Document téléversé avec succès!',
            duration: 2000
          });
          await toast.present();

          await this.loadDocuments();
        }
      },
      async err => {
        this.progressInfo = null;
        console.error(err);

        const toast = await this.toastCtrl.create({
          message: 'Erreur lors du téléversement du document',
          duration: 2000
        });
        await toast.present();
      });
  }

  /**
   *
   */
  async download(doc: any): Promise<void> {
    const accessToken = await this.storageSvc.get('accessTokenQD')
    this.documentSvc.downloadDocument(accessToken, doc.id).subscribe((resp) => {

      const d = resp.body;
      const contentType = resp.headers.get('content-type');

      let blob = new Blob([d], { type: contentType });
      let url = window.URL.createObjectURL(blob);

      let a = document.createElement('a');
      document.body.appendChild(a);
      a.setAttribute('style', 'display: none');
      a.href = url;
      a.download = doc.filename;
      a.click();
      window.URL.revokeObjectURL(url);
      a.remove();
    })

  }

  /**
   *
   */
  async edit(ev: any, el: PredicamentDto): Promise<void> {

    const popover = await this.popoverCtrl.create({
      component: EditDiagnosticPopover,
      event: ev,
      translucent: true,
      componentProps: { 'diagnostic': el }
    });
    await popover.present();
    popover.onDidDismiss().then(async r => {
      if (r.data != null) {
        console.log(r.data)
        if (r.data === 'edit') {
          this.nav.navigateForward(`/odontogram/${this.patient.id}/${el.id}`);
        }
      }
    })
  }

  /**
   *
   */
  async toothDetails(t: any): Promise<void> {
    this.nav.navigateForward(`patients/${this.patient.id}/tooth/${t.toothFdiNumber}`);
  }

}

@Component({
  template: `
  <ion-list lines="none">
    <!--ion-item button (click)="popoverCtrl.dismiss('deactivate')" *ngIf="diagnostic.endDate == null">
      <ion-label>Désactiver</ion-label>
    </ion-item-->
    <!--ion-item button (click)="popoverCtrl.dismiss('activate')" *ngIf="diagnostic.endDate != null">
      <ion-label>Activer</ion-label>
    </ion-item-->
    <ion-item button (click)="popoverCtrl.dismiss('edit')">
      <ion-label>Editer</ion-label>
    </ion-item>
      <ion-item button (click)="popoverCtrl.dismiss('delete')">
      <ion-label>Supprimer</ion-label>
    </ion-item>
  </ion-list>
  `,
  styleUrls: ['./patient.page.scss'],
})
export class EditDiagnosticPopover {

  diagnostic: PredicamentDto;

  /**
   *
   */
  constructor(
    public popoverCtrl: PopoverController,
    private navParams: NavParams
  ) {
    this.diagnostic = this.navParams.get('diagnostic');
  }

}
